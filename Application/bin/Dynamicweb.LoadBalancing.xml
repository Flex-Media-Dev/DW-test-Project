<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.LoadBalancing</name>
    </assembly>
    <members>
        <member name="M:Dynamicweb.LoadBalancing.ActionSequence`1.Enqueue(`0)">
            <summary>
            Enqueues a command.
            </summary>
            <param name="command">Command to add</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.ActionSequence`1.IsEmpty">
            <summary>
            Indicates if sequence is empty.
            </summary>
            <returns>isEmpty</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.ActionSequence`1.ProcessNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Data.ClusterService">
            <summary>
            Service for working with the cluster / network load balancing nodes.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.Create(System.String,System.String)">
            <summary>
            Creates a new node in the Network Load Balancing setup.
            </summary>
            <param name="name">Url of the targeted machine</param>
            <returns>hasPersistedNewNode</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.Read(System.Int32)">
            <summary>
            Yields a node specified by id.
            </summary>
            <param name="id">Id of node</param>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.Update(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Updates the specified node, by persisting it.
            </summary>
            <param name="node">Node to be saved</param>
            <returns>hasBeenUpdated</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.UpdateTimestamp(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Updates the specified node, by persisting it.
            </summary>
            <param name="node">Node to be saved</param>
            <returns>hasBeenUpdated</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.Delete(System.Int32)">
            <summary>
            Removes a node from the Network Load Balancing setup.
            </summary>
            <param name="id">Id of node</param>
            <returns>hasRemovedNodeFromCluster</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.GetNode(System.Int32)">
            <summary>
            Yields a node specified by host name.
            </summary>
            <param name="hostName">Host name</param>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterService.GetAll">
            <summary>
            Yields all nodes in the Network Load Balancing setup.
            </summary>        
            <returns>nodes</returns>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Data.ClusterRepository">
            <summary>
            Repository used for database access related to clustering.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.Create(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Creates a new node in the cluster.
            </summary>
            <param name="node">node information</param>
            <remarks>Returned node is updated with Id</remarks>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.Delete(System.Int32)">
            <summary>
            Deletes the specified node.
            </summary>
            <param name="id">Id of node</param>
            <returns>deleteSucceded</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.Read(System.Int32)">
            <summary>
            Reads the node from database and creates an instance of this node.
            </summary>
            <param name="id">Id of node</param>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.ReadAll">
            <summary>
            Reads all nodes from database and creates instances of these nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.Update(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Updates the database by overriding database information based upon node id.
            </summary>
            <param name="node">Node to be persisted</param>
            <returns>updateSucceded</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Data.ClusterRepository.UpdateTimestamp(System.Int32)">
            <summary>
            Updates the the timestamp of the specified node.
            </summary>
            <param name="node">Node to be persisted</param>
            <returns>updateSucceded</returns>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Data.ClusterNode">
            <summary>
            Contains information about a node that is part of a Dynamicweb Cluster / Network Load Balancing setup.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.Id">
            <summary>
            Id used in the database.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.Name">
            <summary>
            Name of node.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.MachineName">
            <summary>
            Name of the machine this node resides on.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.IP">
            <summary>
            IP address of this node.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.HostName">
            <summary>
            HostName of this node
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.CreationDate">
            <summary>
            Timestamp indicating when this node was added to the database.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.UpdateDate">
            <summary>
            Last update date for data of this node.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Data.ClusterNode.IsEnabled">
            <summary>
            Describes if this node is enabled or disabled.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Logger.Current">
            <summary>
            Gives a logger for the loadbalancing that writes to a folder unique to current hostname.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Logger.SetupHostSpecificLog(System.String)">
            <summary>
            Initializes the logger.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Command">
            <summary>
            Describes which service that needs to be invalidated, by using a specified value.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Command.Name">
            <summary>
            Name of the service handling this command.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Command.CommandValue">
            <summary>
            Value passed along to the service on servantside.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Command.ToString">
            <summary>
            {Name}:{CommandValue}
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Service.UniqueIdentifier">
            <summary>
            Describes the possible unique identifiers in Network Load Balancing.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Service.MasterService">
            <summary>
            This service handles all external communication of commands to other nodes in the cluster.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Service.MasterService.State">
            <summary>
            Indicates if the Load Balancing has been initialized.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.MasterService.Initialize(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Initializes the load balancing framework, setting the provided node as self.
            </summary>
            <param name="node">Self</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.MasterService.ForceBroadcastClusterUpdate">
            <summary>
            Forcefully enqueues an invalidation of the cluster and broadcasts all current commends.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.MasterService.EnqueueChange(System.String,System.String)">
            <summary>
            Enqueues a command to be sent to connected nodes.
            </summary>
            <param name="serviceName">Name of service used to invalidate</param>
            <param name="commandValue">Value passed to the service</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.MasterService.BroadcastChanges">
            <summary>
            Broadcasts all changes enqueued to all connected nodes.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Service.ServantService">
            <summary>
            This service handles all internal command execution on the current node.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.Enqueue(Dynamicweb.LoadBalancing.Command)">
            <summary>
            Enqueues a command.
            </summary>
            <param name="command">Command to add</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.Enroll(System.String,System.Func{System.String,Dynamicweb.Core.ApplicationResponse{System.String}})">
            <summary>
            Registers a function that can be called later by using the name specified.
            </summary>
            <param name="name">Name of function</param>
            <param name="serviceAction">Function</param>
            <returns>wasEnrolled</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.Drop(System.String)">
            <summary>
            Unregisters a function by name.
            </summary>
            <param name="name"></param>
            <returns>wasDropped</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.IsEmpty">
            <summary>
            Indicates if queue is empty.
            </summary>
            <returns>isEmpty</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.ProcessNext">
            <summary>
            Processes the next command in the queue, if any exist, and returns a result.
            </summary>
            <returns>result</returns>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Service.ServantService.ProcessAll">
            <summary>
            Processes all commands in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Notifications.NodeNotification">
            <summary> LoadBalancingNodeNotification </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.BeforeInitialized">
            <summary>
            Notification before a node that is banned is tried for readmission into the cluster.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.AfterInitialized">
            <summary>
            Notification after node has been reactivated after being banned for some time.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.BeforeBanLifted">
            <summary>
            Notification before a node that is banned is tried for readmission into the cluster.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.AfterBanLifted">
            <summary>
            Notification after node has been reactivated after being banned for some time.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.TemporarilyBanned">
            <summary>
            Notification after node has been designated to be skipped for the next period of time.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.BeforeDisabled">
            <summary>
            Notification after node has failed and wont be resent again.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.NodeNotification.AfterDisabled">
            <summary>
            Notification after node has failed and wont be resent again.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Notifications.NodeNotification.LoadBalancingNodeArgs">
            <summary>
            Provides information about load balancing operations on nodes.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Notifications.NodeNotification.LoadBalancingNodeArgs.Node">
            <summary>
            Gets the node that triggered this notification.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Notifications.NodeNotification.LoadBalancingNodeArgs.#ctor(Dynamicweb.LoadBalancing.Data.ClusterNode)">
            <summary>
            Initializes a new instance of an object.
            </summary>
            <param name="node">Node affected.</param>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Notifications.CommandNotification">
            <summary> LoadBalancingCommandNotification </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Notifications.CommandNotification.Discarded">
            <summary>
            Notification after command has failed and wont be resent again.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Notifications.CommandNotification.LoadBalancingCommandArgs">
            <summary>Provides information about load balancing operations on commands.</summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Notifications.CommandNotification.LoadBalancingCommandArgs.Command">
            <summary>
            Gets the command that triggered this notification.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Notifications.CommandNotification.LoadBalancingCommandArgs.#ctor(Dynamicweb.LoadBalancing.Command)">
            <summary>
            Initializes a new instance of an object.
            </summary>
            <param name="command">Command affected.</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.LoadBalancingManager.KeepAlive">
            <summary>
            Checks to see if the runner is alive, and starts a new runner if old one died.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.LoadBalancingManager.Start">
            <summary>
            Starts the NLB runner.
            </summary>
            <remarks>Stops old runner if present</remarks>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.LoadBalancingManager.Stop">
            <summary>
            Stops the NLB runner. Will not stop the scheduled job that restores runner.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.LoadBalancingManager.DisableLoadBalancingSchedule">
            <summary>
            Disables the NLB scheduled job that keeps the runner alive.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.LoadBalancingManager.EnsureLoadBalancingIsScheduled">
            <summary>
            Ensures that the scheduled job that keeps the runner alive for NLB is created.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Threading.Worker">
            <summary>
            Worker class for keeping track of timing and delegating the work needed to maintain NLB.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.Worker.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Threading.Worker.Interval">
            <summary>
            Desired TimeSpan between two sucessive broadcast/update actions.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Threading.Worker.NextRunOverdue">
            <summary>
            TimeStamp indicating if the thread is overdue. If DateTime.Now is greater then this, the execute action is stalled / late.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.Threading.Worker.OverdueInterval">
            <summary>
            Defines how much time should pass from expected run, until the execute action is overdue.
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.Worker.Execute(System.Object)">
            <summary>
            Performs both a broadcast of outgoing changes, followed by an update from incomming changes.
            </summary>
            <param name="obj">CancellationToken</param>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Threading.Worker.EnsureIntervalIsMaintained">
            <summary>
            Updates everything related to maintaining the specified interval between each iteration of the loop.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.NetworkCommand">
            <summary>
            Extends <see cref="T:Dynamicweb.LoadBalancing.Command"/> with a count for failed transmissions.
            </summary>
        </member>
        <member name="P:Dynamicweb.LoadBalancing.NetworkCommand.FailedCount">
            <summary>
            Count for how many times this command failed to be sent to clustered nodes.
            </summary>
        </member>
        <member name="T:Dynamicweb.LoadBalancing.Communication">
            <summary>
            Handles communication between load balancing nodes.
            </summary>
        </member>
        <member name="F:Dynamicweb.LoadBalancing.Communication.GetMessageHandler">
            <summary>
            Gets the current instance of HttpMessageHandler
            </summary>
        </member>
        <member name="M:Dynamicweb.LoadBalancing.Communication.SetMessageHandlerType``1">
            <summary>
            Sets current type of HttpMessageHandler.
            </summary>
            <typeparam name="T">Type of HttpMessageHandler (or inherited from it)</typeparam>
        </member>
    </members>
</doc>
